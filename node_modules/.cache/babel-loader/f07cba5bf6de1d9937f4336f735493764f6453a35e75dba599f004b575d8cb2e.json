{"ast":null,"code":"var _jsxFileName = \"/Users/tejashwa/Desktop/gag-genius/src/Components/Body.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport MemeCard from \"./MemeCard/MemeCard\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CaptionPage from './CaptionPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Body = () => {\n  _s();\n  const [memes, setMemes] = useState([]);\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        const response = await fetch('https://api.imgflip.com/get_memes');\n        if (!response.ok) {\n          throw new Error('Failed to fetch memes');\n        }\n        const data = await response.json();\n        setMemes(data.data.memes);\n      } catch (error) {\n        console.error('Error fetching memes:', error);\n      }\n    };\n    fetchMemes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"memes-container\",\n        children: memes.map(meme => /*#__PURE__*/_jsxDEV(MemeCard, {\n          meme: meme\n        }, meme.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/caption/:id\",\n      component: CaptionPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Body, \"5gdHCcF3c1u3tVEy6qXr88dpXdk=\");\n_c = Body;\nexport default Body;\nvar _c;\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"names":["useEffect","useState","MemeCard","BrowserRouter","Router","Route","CaptionPage","jsxDEV","_jsxDEV","Body","_s","memes","setMemes","fetchMemes","response","fetch","ok","Error","data","json","error","console","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","meme","id","path","component","_c","$RefreshReg$"],"sources":["/Users/tejashwa/Desktop/gag-genius/src/Components/Body.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport MemeCard from \"./MemeCard/MemeCard\";\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport CaptionPage from './CaptionPage';\n\nconst Body = () => {\n  const [memes, setMemes] = useState([]);\n\n  useEffect(() => {\n    const fetchMemes = async () => {\n      try {\n        const response = await fetch('https://api.imgflip.com/get_memes');\n        if (!response.ok) {\n          throw new Error('Failed to fetch memes');\n        }\n        const data = await response.json();\n        setMemes(data.data.memes);\n      } catch (error) {\n        console.error('Error fetching memes:', error);\n      }\n    };\n\n    fetchMemes();\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"body\">\n        <h1>Memes</h1>\n        <div className=\"memes-container\">\n          {memes.map((meme) => (\n            <MemeCard key={meme.id} meme={meme} />\n          ))}\n        </div>\n      </div>\n      <Route path=\"/caption/:id\" component={CaptionPage} />\n    </Router>\n  );\n};\n\nexport default Body;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,qBAAqB;AAE1C,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACjE,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACjE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QAC1C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,QAAQ,CAACM,IAAI,CAACA,IAAI,CAACP,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACJ,MAAM;IAAAkB,QAAA,gBACLd,OAAA;MAAKe,SAAS,EAAC,MAAM;MAAAD,QAAA,gBACnBd,OAAA;QAAAc,QAAA,EAAI;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdnB,OAAA;QAAKe,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAC7BX,KAAK,CAACiB,GAAG,CAAEC,IAAI,iBACdrB,OAAA,CAACN,QAAQ;UAAe2B,IAAI,EAAEA;QAAK,GAApBA,IAAI,CAACC,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAe,CACtC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNnB,OAAA,CAACH,KAAK;MAAC0B,IAAI,EAAC,cAAc;MAACC,SAAS,EAAE1B;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEb,CAAC;AAACjB,EAAA,CAjCID,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAmCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}